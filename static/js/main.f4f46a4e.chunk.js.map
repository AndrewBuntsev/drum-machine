{"version":3,"sources":["const/pads.js","components/Pad.js","App.js","serviceWorker.js","index.js"],"names":["PADS","keyCode","keyTrigger","id","url","DEFAULT_BACKGOUND","PRESSED_BACKGOUND","Pad","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onKeyPress","e","state","padConfig","onMouseDown","setState","background","document","getElementById","play","padPressed","onMouseUp","find","p","addEventListener","react_default","a","createElement","className","style","borderRadius","gridColumn","column","toString","gridRow","row","fontSize","fontWeight","fontFamily","textAlign","cursor","color","onMouseLeave","marginTop","src","Component","displayStyle","width","height","margin","padding","padsGridStyle","display","gridTemplateColumns","gridTemplateRows","gridColumnGap","gridRowGap","innerHTML","App","components_Pad","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4f46a4e.chunk.js","sourcesContent":["export const PADS = [{\r\n    keyCode: 81,\r\n    keyTrigger: 'Q',\r\n    id: 'Chord-1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_1.mp3'\r\n  }, {\r\n    keyCode: 87,\r\n    keyTrigger: 'W',\r\n    id: 'Chord-2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_2.mp3'\r\n  }, {\r\n    keyCode: 69,\r\n    keyTrigger: 'E',\r\n    id: 'Chord-3',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Chord_3.mp3'\r\n  }, {\r\n    keyCode: 65,\r\n    keyTrigger: 'A',\r\n    id: 'Shaker',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\r\n  }, {\r\n    keyCode: 83,\r\n    keyTrigger: 'S',\r\n    id: 'Open-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\r\n  }, {\r\n    keyCode: 68,\r\n    keyTrigger: 'D',\r\n    id: 'Closed-HH',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\r\n  }, {\r\n    keyCode: 90,\r\n    keyTrigger: 'Z',\r\n    id: 'Punchy-Kick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\r\n  }, {\r\n    keyCode: 88,\r\n    keyTrigger: 'X',\r\n    id: 'Side-Stick',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\r\n  }, {\r\n    keyCode: 67,\r\n    keyTrigger: 'C',\r\n    id: 'Snare',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\r\n  }];","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { PADS } from '../const/pads';\n\n\n\nconst DEFAULT_BACKGOUND = '#449988';\nconst PRESSED_BACKGOUND = '#66BBAA';\n\nclass Pad extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = { \n      background: DEFAULT_BACKGOUND,\n      padConfig: PADS.find(p => p.keyTrigger === this.props.keyTrigger)\n    };\n\n    document.addEventListener('keydown', this.onKeyPress);\n  }\n\n  \n  onKeyPress = (e) => {\n    \n    if (e.keyCode === this.state.padConfig.keyCode) {\n      this.onMouseDown(e);\n    }\n  };\n\n  onMouseDown = (e) => {\n    this.setState({ background: PRESSED_BACKGOUND })\n    document.getElementById(this.props.keyTrigger).play();\n    this.props.padPressed(this.state.padConfig);\n  };\n\n  onMouseUp = (e) => this.setState({ background: DEFAULT_BACKGOUND });\n  \n  render() {\n    \n    return (\n      <div className=\"drum-pad\" style={{\n        background: this.state.background,\n        borderRadius: '3px',\n        gridColumn: this.props.column.toString(),\n        gridRow: this.props.row.toString(),\n        fontSize: '40px',\n        fontWeight: 'bold',\n        fontFamily: 'sans-serif',\n        textAlign: 'center',\n        cursor: 'pointer',\n        color: '#FFFFFF'}}\n        onMouseDown={this.onMouseDown}\n        onMouseUp={this.onMouseUp}\n        onMouseLeave={this.onMouseUp}\n        id={this.state.padConfig.id}>\n        <div style={{marginTop: '15%'}}>\n          {this.props.keyTrigger}\n        </div>\n        <audio className='clip' id={this.props.keyTrigger} src={this.state.padConfig.url}></audio>\n      </div>\n    );\n  }\n}\n\n\nPad.propTypes = {\n  row: PropTypes.number.isRequired,\n  column: PropTypes.number.isRequired,\n  keyTrigger: PropTypes.string.isRequired,\n  padPressed: PropTypes.func.isRequired\n};\n\n\n\nexport default Pad;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport Pad from './components/Pad';\n\n\nconst displayStyle = {\n  background: '#999999',\n  width: '200px',\n  height: '50px',\n  borderRadius: '5px',\n  margin: 'auto',\n  padding: '5px',\n  color: '#2233AA'\n};\n\nconst padsGridStyle = {\n  background: '#39393b',\n  width: '400px',\n  height: '300px',\n  borderRadius: '15px',\n  margin: 'auto',\n  marginTop: '5px',\n  display: 'grid',\n  padding: '20px',\n  gridTemplateColumns: '1fr 1fr 1fr',\n  gridTemplateRows: '1fr 1fr 1fr',\n  gridColumnGap: '35px',\n  gridRowGap: '35px'\n};\n\n\nfunction padPressed(padConfig){\n  document.getElementById('display').innerHTML = padConfig.id;\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" style={{background: '#456789'}}>\n        <div id='drum-machine'>\n          <div id='display' style={displayStyle}></div>\n          <div id='drum-pads' style={padsGridStyle}>\n            <Pad row={1} column={1} keyTrigger='Q' padPressed={padPressed}/>\n            <Pad row={1} column={2} keyTrigger='W' padPressed={padPressed}/>\n            <Pad row={1} column={3} keyTrigger='E' padPressed={padPressed}/>\n            <Pad row={2} column={1} keyTrigger='A' padPressed={padPressed}/>\n            <Pad row={2} column={2} keyTrigger='S' padPressed={padPressed}/>\n            <Pad row={2} column={3} keyTrigger='D' padPressed={padPressed}/>\n            <Pad row={3} column={1} keyTrigger='Z' padPressed={padPressed}/>\n            <Pad row={3} column={2} keyTrigger='X' padPressed={padPressed}/>\n            <Pad row={3} column={3} keyTrigger='C' padPressed={padPressed}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}